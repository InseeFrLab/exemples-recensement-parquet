```{{ojs}}
renommage_documentation = `SELECT 
  COD_VAR AS nom_variable, 
  LIB_VAR AS description_variable, 
  TYPE_VAR AS type_variable, 
  COD_MOD AS code_modalite, 
  LIB_MOD AS description_modalite`

db = {
  const configuredClient = await DuckDBClient.of({
    individus: FileAttachment(`rp_parquet/FD_INDCVI_2020.parquet`),
    logements: FileAttachment("rp_parquet/FD_LOGEMT_2020.parquet"),
    doc: {
        file: FileAttachment("rp_parquet/dictionnaire_variables_2019.csv"),
        header: true
    }
  });

  await configuredClient.query(`
    CREATE OR REPLACE VIEW table_individu 
    AS SELECT * FROM individus`
  ) ;

  await configuredClient.query(`
    CREATE OR REPLACE VIEW table_logement 
    AS SELECT * FROM logements`
  ) ;

  await configuredClient.query(`
    CREATE OR REPLACE VIEW documentation 
    AS ${renommage_documentation} FROM doc`
  ) ;

  return configuredClient
}
```

```{ojs}
//| echo: false
renommage_documentation = `SELECT 
  COD_VAR AS nom_variable, 
  LIB_VAR AS description_variable, 
  TYPE_VAR AS type_variable, 
  COD_MOD AS code_modalite, 
  LIB_MOD AS description_modalite`

db = {
  const configuredClient = await DuckDBClient.of({
    individus: FileAttachment(`rp_parquet/FD_INDCVI_2020.parquet`),
    logements: FileAttachment("rp_parquet/FD_LOGEMT_2020.parquet"),
    doc: {
        file: FileAttachment("rp_parquet/dictionnaire_variables_2019.csv"),
        header: true
    }
  });

  await configuredClient.query(`
    CREATE OR REPLACE VIEW table_individu 
    AS SELECT * FROM individus`
  ) ;

  await configuredClient.query(`
    CREATE OR REPLACE VIEW table_logement 
    AS SELECT * FROM logements`
  ) ;

  await configuredClient.query(`
    CREATE OR REPLACE VIEW documentation 
    AS ${renommage_documentation} FROM doc`
  ) ;

  return configuredClient
}
```

